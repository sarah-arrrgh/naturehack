/**
 * NewZealandOrganismsRegisterLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 11/06/2015
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var NamesController = {

    /**
     * Returns a paged list of names details. All parameters are optional. If nothing is specified then all names are returned.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {string|null} ancestorNameId    Optional parameter: The id of any ancestor for the names to return.
     *     {string|null} biostatus    Optional parameter: Filter according to biostatus.
     *     {string|null} fromModifiedDate    Optional parameter: The earliest modified date for any of the results. The format of the date is yyyy-dd-mm.
     *     {int|null} page    Optional parameter: The page number to return (starting at 1).
     *     {int|null} pagesize    Optional parameter: The number of records on each page (default = 10).
     *     {string|null} parentNameId    Optional parameter: The id of the direct parent for the names to return.
     *     {string|null} status    Optional parameter: Filter according to status.
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {NamesResponse}
     */
    getNamesGet : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/names";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "ancestorNameId" : input.ancestorNameId,
            "biostatus" : input.biostatus,
            "fromModifiedDate" : input.fromModifiedDate,
            "page" : input.page,
            "pagesize" : input.pagesize,
            "parentNameId " : input.parentNameId,
            "status" : input.status
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Returns a name by its ID.
     * @param {string} id    Required parameter: The unique id of the name to return.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {NamesResponse}
     */
    getNamesGetByID : function(id, callback){

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/names/{id}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "id" : id
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Returns a list of search results and faceting details for a query on names.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {string|null} filter    Optional parameter: Additional filter to provide faceting of the results. Available filter fields include: rank, governingcode, status, class, providercode, and kingdom
     *     {string|null} orderby    Optional parameter: Enables sorting of the results using the syntax: fieldname [ASC|DESC]
     *     {int|null} page    Optional parameter: The page number to return (starting at 1).
     *     {int|null} pageSize    Optional parameter: The number of records on each page.
     *     {string|null} query    Optional parameter: The query to use for searching (Lucene based syntax).
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {NameSearchResponse}
     */
    getNamesGetSearch : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/names/search";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "filter" : input.filter,
            "orderby" : input.orderby,
            "page" : input.page,
            "pageSize" : input.pageSize,
            "query" : input.query
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Returns a list of name strings for completion lookups.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {string|null} query    Optional parameter: The text used to query the list of names. This is a prefix query on the full name of the name
     *     {int|null} take    Optional parameter: The number of name strings to return (default = 10)
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {array}
     */
    getNamesGetLookups : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/names/lookups";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "query" : input.query,
            "take" : input.take
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = NamesController;